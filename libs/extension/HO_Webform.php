<?php
/**
 * This file contains the code for generating HTML Web Form
 * 
 * PHP HTML Object is PHP Object Library for making autogenerated HTML code
 * over PHP Programming. Providing the variety of needs to make HTML code
 * automatically, such as HTML Tags, Attributes, Tag's Content, Frequently Used Tags,
 * and Other HTML Object.
 *
 * PHP Versions 5
 *
 * @category    PHP Object
 * @package     HTML Object Extension
 * @author      Abdul Hanan (http://hanan.qummatic.com) Original Author
 * @copyright   2010 bekasi-code.qummatic.com
 * @license     http://www.gnu.org/licenses/lgpl-3.0.txt LGPL Version 3
 * @version     ver 0.1-beta
 * @link        http://bekasi-code.qummatic.com/html-object
 *
 */

/**
 * HTML Object Webform class
 *
 * @subpackage HTML Object Extension
 * @access public
 * @version class-ver 0.1-beta
 * @author Abdul Hanan (http://hanan.qummatic.com) Original Author
 */
class HO_Webform extends HO_Extension
{
    /**
     * @var object
     * @access private
     */
    private $hoForm;
    /**
     * @var string
     * @access private
     */
    private $webform;
    /**
     * @var array
     * @access private
     */
    private $configs = array();

    /**
     * @var string
     * @access public
     */
    public $type;
    /**
     * @var string
     * @access public
     */
    public $path;

    /**
     * Constructor of the container class
     *
     * @access public
     */
    public function __construct()
    {
        parent::__construct();

        $this->hoForm = clone $this->Form;
        $this->type = 'xml';
        $this->path = dirname(__FILE__);

        $configs = array(
            'colon'=>':',
            'singlerow'=>NULL
        );
        $this->setConfig($configs);
    }

    /**
     * Generates Field
     * 
     * Generates the field which used by HO_Webform::process() method
     * 
     * @param  string $argID
     * @param  array $argValues
     * @access public
     */
    public function generateField($argID, $argValues)
    {
        $type = $argValues['type'];
        if ($type == 'input')
            $type = 'input|text';
        $expType = explode('|', $type);
        $value = NULL;
        if (isset($GLOBALS['_HOFORM_' . strtoupper($argID)])) {
            $value = $GLOBALS['_HOFORM_' . strtoupper($argID)];
        }
        else {
            if (isset($argValues['value'])) {
                if ($expType[0] == 'select') {
                    if ($argValues['value'] && is_array($argValues['value']))
                        $value = $argValues['value'];
                    else
                        $value = array();
                }
                else {
                    if (trim($argValues['value']))
                        $value = $argValues['value'];
                }
            }
        }
        
        $name = NULL;
        if (isset($argValues['name']) && trim($argValues['name']))
            $name = $argValues['name'];
        $arrAttributes = array();
        if (isset($argValues['attribute']) && $argValues['attribute'])
            $arrAttributes = $argValues['attribute'];
        $datalist = NULL;
        if (isset($argValues['datalist']) && $argValues['datalist']) {
            $option = '';
            foreach ($argValues['datalist'] as $listValues) {
                $objDatalistOption = $this->__option();
                $objDatalistOption->attribute('value', strval($listValues['value']));
                if (isset($listValues['label']) && trim($listValues['label']))
                    $objDatalistOption->attribute('label', $listValues['label']);
                if (isset($listValues['selected']) && $listValues['selected'])
                    $objDatalistOption->attribute('selected', 'selected');
                $option .= $objDatalistOption->fetch();
            }
            $objDatalist = $this->__datalist('list-' . $argID);
            $objDatalist->innerHTML($option);
            $datalist = $objDatalist->fetch();
            $arrAttributes = array_merge($arrAttributes, array('list'=>'list-' . $argID));
        }

        switch ($expType[0]) {
            default:
            case 'input':
                $formItem = $this->hoForm->input($argID, $expType[1], $value, $name, $arrAttributes);
                $formItem .= $datalist;
                break;
            case 'textarea':
                $formItem = $this->hoForm->textarea($argID, $value, $name, $arrAttributes);
                break;
            case 'select':
                $formItem = $this->hoForm->select($argID, $value, $name, $arrAttributes);
                break;
            /*
            case 'content':
                $idHidden = 0;
                if (isset($argValues['id_hidden']) && $argValues['id_hidden'])
                    $idHidden = $argValues['id_hidden'];
                $formItem = $this->hoForm->content($argID, $value, $idHidden, $arrAttributes);
                break;
             *
             */
            case 'hidden':
                $formItem = $this->hoForm->input($argID, 'hidden', $value);
                break;
        }

        return $formItem;
    }

    /**
     * Processes Web Form
     * 
     * Scripts for processing Web Form
     *
     * @param  array $argWebform
     * @access private
     */
    private function process($argWebform)
    {
        $formID = $argWebform['id'];
        $formName = NULL;
        if ($argWebform['name'])
            $formName = $argWebform['name'];
        $formAttributes = $argWebform['attribute'];
        $formAction = NULL;
        if ($argWebform['action'])
            $formAction = $argWebform['action'];
        $formMethod = $argWebform['method'];
        
        $hidden = '';
        $contents = array();
        foreach ($argWebform['field'] as $fieldID=>$fieldValues) {
            $colsIndex = (isset($fieldValues['col']) && $fieldValues['col']) ? 1 : 0;
            $fieldItem = $this->generateField($fieldID, $fieldValues);
            // {{{ field content
            $divTitle = $this->div($fieldValues['title'] . ' ' . $colon, NULL, NULL, 'fieldtitle');
            $divValue = $this->div($fieldItem, NULL, NULL, 'fieldcontent');
            $contents[$colsIndex][] = $this->div($divTitle . $divValue, NULL, NULL, 'fielditem');
            // }}}
        }
        // {{{ content section
        $content = '';
        $contentLeft = '';
        $contentRight = '';
        foreach ($contents[0] as $contentItem) {
            $contentLeft .= $contentItem;
        }
        $content = $contentLeft;
        if (isset($contents[1])) {
            foreach ($contents[1] as $contentItem) {
                $contentRight .= $contentItem;
            }
            // {{{ assigns again if has 2 columns
            $divContentLeft = $this->div($contentLeft, 'formcontent-left');
            $divContentRight = $this->div($contentRight, 'formcontent-right');
            $divContentClear = $this->div('', NULL, 'clear: both;');
            $content = $divContentLeft . $divContentRight . $divContentClear;
            // }}}
        }
        // }}}
        // {{{ button & hidden section
        $buttonHidden = '';
        if (!is_null($argWebform['submit'])){
            $name = isset($argWebform['submit']['name']) ? $argWebform['submit']['name'] : NULL;
            $arrAttributes = isset($argWebform['submit']['attribute']) ? $argWebform['submit']['attribute'] : array();
            $buttonHidden .= $this->hoForm->input($argWebform['submit']['id'], 'submit', $argWebform['submit']['value'], $name, $arrAttributes);
        }
        if (!is_null($argWebform['reset'])) {
            $name = isset($argWebform['reset']['name']) ? $argWebform['reset']['name'] : NULL;
            $arrAttributes = isset($argWebform['reset']['attribute']) ? $argWebform['reset']['attribute'] : array();
            $buttonHidden .= $this->hoForm->input($argWebform['reset']['id'], 'reset', $argWebform['reset']['value'], $name, $arrAttributes);
        }
        if ($argWebform['button']) {
            foreach ($argWebform['button'] as $buttonID=>$buttonValues) {
                $name = isset($buttonValues['name']) ? $buttonValues['name'] : NULL;
                $arrAttributes = isset($buttonValues['attribute']) ? $buttonValues['attribute'] : array();
                $buttonHidden .= $this->hoForm->input($buttonID, 'button', $buttonValues['value'], $name, $arrAttributes);
            }
        }
        $buttonHidden = $this->div($buttonHidden, NULL, NULL, 'fieldbutton');
        // }}}

        // webform processes
        $this->webform = $this->hoForm->form($content . $hidden . $buttonHidden, $formID, $formName, $formAction, $formMethod, $formAttributes);
    }

    /**
     * Generates from XML
     * 
     * Returns array from XML file which used by HO_Webform::generate() menthod
     * 
     * @param  string $argXMLPath
     * @access private
     */
    private function xmlProcess($argXMLPath)
    {
        $hoform = simplexml_load_file($argXMLPath);

        // {{{ webform header
        $webforms['id'] = (string) $hoform->id;
        if (isset($hoform->name))
            $webforms['name'] = (string) $hoform->name;
        if (isset($hoform->method)) 
            $webforms['method'] = (string) $hoform->method;
        else
            $webforms['method'] = 'post';
        if (isset($hoform->action))
            $webforms['action'] = (string) $hoform->action;
        if (isset($hoform->attribute)) {
            $attribute = $hoform->attribute;
            $attributes = array();
            foreach ($attribute->item as $attributeItems) {
                $key = (string) $attributeItems['name'];
                $value = (string) $attributeItems;
                $attributes[$key] = (string) $value;
            }
            $webforms['attribute'] = $attributes;
        }
        // }}}
        // {{{ webform fields
        $field = $hoform->field;
        $fields = array();
        foreach ($hoform->field as $fieldItems) {
            if (isset($fieldItems->id)) {
                $id = (string) $fieldItems->id;
                $fields[$id] = array();
                if (isset($fieldItems->title))
                    $fields[$id]['title'] = (string) $fieldItems->title;
                if (isset($fieldItems->name))
                    $fields[$id]['name'] = (string) $fieldItems->name;
                if (isset($fieldItems->type))
                    $fields[$id]['type'] = (string) $fieldItems->type;
                else
                    $fields[$id]['type'] = 'input|text';
                if (isset($fieldItems->col))
                    $fields[$id]['col'] = (string) $fieldItems->col;
                if (isset($fieldItems->value)) {
                    $value = (string) $fieldItems->value;
                    if (isset($fieldItems->value->item)) {
                        $items = array();
                        foreach ($fieldItems->value->item as $valueItems) {
                            $key = (string) $valueItems['name'];
                            $value = (string) $valueItems;
                            $selected = (isset($valueItems['selected']) && $valueItems['selected']) ? true : false;
                            $items[$key] = array($value, $selected);
                        }
                        $fields[$id]['value'] = $items;
                    }
                    else {
                        if (trim($value))
                            $fields[$id]['value'] = $value;
                    }
                }
                // {{{ field attributes
                $attributes = array();
                if (isset($fieldItems->attribute)) {
                    $attribute = $fieldItems->attribute;
                    foreach ($attribute->item as $attributeItems) {
                        $key = (string) $attributeItems['name'];
                        $value = (string) $attributeItems;
                        $attributes[$key] = (string) $value;
                    }
                }
                $fields[$id]['attribute'] = $attributes;
                // }}}
                // {{{ datalist for HTML5
                if (isset($fieldItems->datalist)) {
                    $datalists = array();
                    foreach ($fieldItems->datalist->item as $value) {
                        $valueLists = array();
                        $valueLists['value'] = (string) $value['value'];
                        if (isset($value['label']))
                            $valueLists['label'] = (string) $value['label'];
                        if (isset($value['selected']))
                            $valueLists['selected'] = intval($value['selected']);
                        $datalists[] = $valueLists;
                    }
                    $fields[$id]['datalist'] = $datalists;
                }
                // }}}
            }
        }
        $webforms['field'] = $fields;
        // }}}
        // {{{ submit button
        $webforms['submit'] = NULL;
        if (isset($hoform->submit)){
            $webforms['submit']['id'] = (string) $hoform->submit->id;
            if (isset($hoform->submit->name))
                $webforms['submit']['name'] = (string) $hoform->submit->name;
            if (isset($hoform->submit->value))
                $webforms['submit']['value'] = (string) $hoform->submit->value;
            else
                $webforms['submit']['value'] = 'Submit';
            // {{{ submit attributes
            $attribute = $hoform->submit->attribute;
            $attributes = array();
            foreach ($attribute->item as $attributeItems) {
                $key = (string) $attributeItems['name'];
                $value = (string) $attributeItems;
                $attributes[$key] = (string) $value;
            }
            $webforms['submit']['attribute'] = $attributes;
            // }}}
        }
        // }}}
        // {{{ reset button
        $webforms['reset'] = NULL;
        if (isset($hoform->reset)){
            $webforms['reset']['id'] = (string) $hoform->reset->id;
            if (isset($hoform->reset->name))
                $webforms['reset']['name'] = (string) $hoform->reset->name;
            if (isset($hoform->reset->value))
                $webforms['reset']['value'] = (string) $hoform->reset->value;
            else
                $webforms['reset']['value'] = 'Reset';
            // {{{ field attributes
            $attribute = $hoform->reset->attribute;
            $attributes = array();
            foreach ($attribute->item as $attributeItems) {
                $key = (string) $attributeItems['name'];
                $value = (string) $attributeItems;
                $attributes[$key] = (string) $value;
            }
            $webforms['reset']['attribute'] = $attributes;
            // }}}
        }
        // // }}}
        // {{{ other button
        $buttons = array();
        if (isset($hoform->button)){
            foreach ($hoform->button as $buttonItems) {
                $id = (string) $buttonItems->id;
                        
                $buttons[$id] = array();
                if (isset($buttonItems->name))
                    $buttons[$id]['name'] = (string) $buttonItems->name;
                if (isset($buttonItems->value))
                    $buttons[$id]['value'] = (string) $buttonItems->value;
                else
                    $buttons[$id]['value'] = 'Click';
                // {{{ field attributes
                $attribute = $buttonItems->attribute;
                $attributes = array();
                foreach ($attribute->item as $attributeItems) {
                    $key = (string) $attributeItems['name'];
                    $value = (string) $attributeItems;
                    $attributes[$key] = (string) $value;
                }
                $buttons[$id]['attribute'] = $attributes;
                // }}}
            }
        }
        $webforms['button'] = $buttons;
        // }}}
        $this->process($webforms);
    }

    /**
     * Generates PHP Array 
     * 
     * Returns array from PHP array file which used by HO_Webform::generate() menthod
     * 
     * @param  string $argArrayPath
     * @access private
     */
    private function arrayProcess($argArrayPath)
    {
        include $argArrayPath;
        $arrForms = array();
        if (isset($hoforms) && is_array($hoforms)) {
            $arrForms = $hoforms;
        }
        else {
            if (isset($hoform) && is_array($hoform))
                $arrForms = $hoform;
        }
        
        if ($arrForms) {
            // {{{ webform header
            $webforms['id'] = $arrForms['form']['id'];
            if (isset($arrForms['form']['name']))
                $webforms['name'] = $arrForms['form']['name'];
            if (isset($arrForms['form']['method'])) 
                $webforms['method'] = $arrForms['form']['method'];
            else
                $webforms['method'] = 'post';
            if (isset($arrForms['form']['action']))
                $webforms['action'] = $arrForms['form']['action'];
            if (isset($arrForms['form']['attribute'])) {
                $attributes = array();
                foreach ($arrForms['form']['attribute'] as $keyAttribute=>$valueAttribute) {
                    $attributes[$keyAttribute] = $valueAttribute;
                }
                $webforms['attribute'] = $attributes;
            }
            
            $fields = array();
            foreach ($arrForms['field'] as $fieldItems) {
                if (isset($fieldItems['id'])) {
                    $id = $fieldItems['id'];
                    $fields[$id] = array();
                    if (isset($fieldItems['title']))
                        $fields[$id]['title'] = $fieldItems['title'];
                    if (isset($fieldItems['name']))
                        $fields[$id]['name'] = $fieldItems['name'];
                    if (isset($fieldItems['type']))
                        $fields[$id]['type'] = $fieldItems['type'];
                    else
                        $fields[$id]['type'] = 'input|text';
                    if (isset($fieldItems['col']))
                        $fields[$id]['col'] = $fieldItems['col'];
                    if (isset($fieldItems['value']) && $fieldItems['value'])
                        $fields[$id]['value'] = $fieldItems['value'];
                    // {{{ field attributes
                    $attributes = array();
                    if (isset($fieldItems['attribute']) && is_array($fieldItems['attribute'])) {
                        foreach ($fieldItems['attribute'] as $keyAttribute=>$valueAttribute) {
                            $attributes[$keyAttribute] = $valueAttribute;
                        }
                    }
                    $fields[$id]['attribute'] = $attributes;
                    // }}}
                    // {{{ datalist for HTML5
                    if (isset($fieldItems['datalist']) && is_array($fieldItems['datalist'])) {
                        $datalists = array();
                        foreach ($fieldItems['datalist'] as $value) {
                            $datalists[] = $value;
                        }
                        $fields[$id]['datalist'] = $datalists;
                    }
                    // }}}
                }
            }
            $webforms['field'] = $fields;
            // }}}
            // {{{ submit button
            $webforms['submit'] = NULL;
            if (isset($arrForms['submit'])){
                $webforms['submit']['id'] = $arrForms['submit']['id'];
                if (isset($arrForms['submit']['name']))
                    $webforms['submit']['name'] = $arrForms['submit']['name'];
                if (isset($arrForms['submit']['value']))
                    $webforms['submit']['value'] = $arrForms['submit']['value'];
                else
                    $webforms['submit']['value'] = 'Submit';
                // {{{ submit attributes
                $attributes = array();
                foreach ($arrForms['submit']['attribute'] as $keyAttribute=>$valueAttribute) {
                    $attributes[$keyAttribute] = $valueAttribute;
                }
                $webforms['submit']['attribute'] = $attributes;
                // }}}
            }
            // }}}
            // {{{ reset button
            $webforms['reset'] = NULL;
            if (isset($arrForms['reset'])){
                $webforms['reset']['id'] = $arrForms['reset']['id'];
                if (isset($arrForms['reset']['name']))
                    $webforms['reset']['name'] = $arrForms['reset']['name'];
                if (isset($arrForms['reset']['value']))
                    $webforms['reset']['value'] = $arrForms['reset']['value'];
                else
                    $webforms['reset']['value'] = 'Submit';
                // {{{ reset attributes
                $attributes = array();
                foreach ($arrForms['reset']['attribute'] as $keyAttribute=>$valueAttribute) {
                    $attributes[$keyAttribute] = $valueAttribute;
                }
                $webforms['reset']['attribute'] = $attributes;
                // }}}
            }
            // // }}}
            // {{{ other button
            $buttons = array();
            if (isset($arrForms['button'])){
                foreach ($arrForms['button'] as $buttonItems) {
                    $id = $buttonItems['id'];

                    $buttons[$id] = array();
                    if (isset($buttonItems['name']))
                        $buttons[$id]['name'] = $buttonItems['name'];
                    if (isset($buttonItems['value']))
                        $buttons[$id]['value'] = $buttonItems['value'];
                    else
                        $buttons[$id]['value'] = 'Click';
                    // {{{ field attributes
                    $attributes = array();
                    foreach ($buttonItems['attribute'] as $keyAttribute=>$valueAttribute) {
                        $attributes[$keyAttribute] = $valueAttribute;
                    }
                    $buttons[$id]['attribute'] = $attributes;
                    // }}}
                }
            }
            $webforms['button'] = $buttons;
            // }}}
            //print_r($webforms);die();
            $this->process($webforms);
        }
        // @todo: exception here
    }

    /**
     * Sets Configuration
     *
     * @param  array $argConfigs
     * @access public
     */
    public function setConfig($argConfigs)
    {
        if (is_array($argConfigs))
            $this->configs = $argConfigs;
    }

    /**
     * Generates HTML Form
     * 
     * Generating types:
     * - XML
     * - PHP Array
     * 
     * @param  string $argFile
     * @access public
     */
    public function generate($argFile)
    {
        if ($this->type == 'xml') {
            $xmlPath = $this->path . DIRECTORY_SEPARATOR . $argFile;
            if (file_exists($xmlPath) && is_file($xmlPath))
                $this->xmlProcess($xmlPath);
        }

        if ($this->type == 'array') {
            $arrayPath = $this->path . DIRECTORY_SEPARATOR . $argFile;
            if (file_exists($arrayPath) && is_file($arrayPath))
                $this->arrayProcess($arrayPath);
        }
    }

    /**
     * Fetches Web Form
     * 
     * Returns Web Form, the result from generating Web Form.
     *
     * @access public
     * @return string
     */
    public function fetch()
    {
        return $this->webform;
    }

    /**
     * Displays Web Form
     * 
     * Displays Web Form, the result from generating Web Form
     *
     * @access public
     */
    public function display()
    {
        echo $this->webform;
    }
}
?>
